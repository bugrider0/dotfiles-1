#!/bin/env bash

GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
BGREEN='\033[1;32m'
BYELLOW='\033[1;33m'
BBLUE='\033[1;34m'
NC='\033[0m'

DOTFILES_DIR=$(git rev-parse --show-toplevel)

# Util Func{{{
setup_symlink() {
    if [[ "$1" == *"/"* ]]; then
        DIR=$(echo "$1" | grep -o ".*\/")
        mkdir -p "$HOME/$DIR"
    fi
    ln -sf "$DOTFILES_DIR/$1" "$HOME/$1"
}

setup_copy() {
    if [[ "$1" == *"/"* ]]; then
        DIR=$(echo "$1" | grep -o ".*\/")
        mkdir -p "$HOME/$DIR"
    fi
    cp -rf "$DOTFILES_DIR/$1" "$HOME/$1"
}
#}}}
setup_dotfiles() { #{{{
    setup_symlink .Xresources
    setup_symlink .xinitrc
    setup_copy .wmrc
    setup_symlink .wm
    setup_copy .redshiftgrc
    setup_copy .gitconfig
    setup_copy .ctags
    setup_symlink .conkyrc
    setup_symlink .bashrc
    setup_symlink .w3m/config
    setup_symlink .weechat/weechat.conf
    setup_copy .aria2
    setup_copy .config/alacritty/alacritty.yml
    setup_copy .config/autostart
    setup_symlink .config/pip
    setup_copy .config/xsettingsd
    setup_copy .config/autostart-scripts
    setup_symlink .config/fontconfig/fonts.conf
    setup_copy .config/polybar/config
    setup_symlink .config/polybar/themes
    setup_symlink .config/polybar/scripts
    setup_copy .config/rofi/config.rasi
    setup_symlink .config/rofi/themes
    setup_symlink .config/rtv
    setup_symlink .config/picom.conf
    setup_copy .config/pikaur.conf
    setup_symlink .config/fcitx/conf
    setup_symlink .config/fcitx/config
    setup_symlink .config/fcitx/profile
    setup_symlink package.json
    setup_symlink package-lock.json
    setup_symlink .npmrc
    setup_copy .yarnrc
    setup_copy .config/zathura/zathurarc
    setup_symlink .config/zathura/themes
    setup_copy .config/libinput-gestures.conf
    printf "${BBLUE}>> Setup root directory manually.${NC}\n"
} #}}}
setup_arch_repos() { #{{{
    sudo cp ~/repo/dotfiles/.root/etc/pacman.conf /etc/pacman.conf
    sudo pacman-key --init

    # personal repository
    curl -L https://repo.sainnhe.dev/sainnhe.gpg \
        | sudo pacman-key --add -
    sudo pacman-key --finger 16F249ED243F596E
    sudo pacman-key --lsign-key 16F249ED243F596E
    git clone git@github.com:sainnhe/gnupg ~/.gnupg

    # linux surface
    wget -qO - https://raw.githubusercontent.com/linux-surface/linux-surface/master/pkg/keys/surface.asc \
        | sudo pacman-key --add -
    sudo pacman-key --finger 56C464BAAC421453
    sudo pacman-key --lsign-key 56C464BAAC421453

    # archstrike
    sudo dirmngr < /dev/null
    wget -qO - https://archstrike.org/keyfile.asc \
        | sudo pacman-key --add -
    sudo pacman-key --lsign-key 9D5F1C051D146843CDA4858BDE64825E7CBC0D51

    # required packages
    sudo pacman -Sy
    sudo pacman -S \
        archlinuxcn-keyring \
        archstrike-keyring \
        archstrike-mirrorlist
} #}}}
setup_repos() { #{{{
    ssh-keygen -t rsa -f ~/.ssh/id_rsa -C "sainnhe@gmail.com"
    ssh-keygen -t ecdsa -f ~/.ssh/id_ecdsa -C "sainnhe@gmail.com"
    eval "$(ssh-agent -s)"
    ssh-add ~/.ssh/id_rsa
    ssh-add ~/.ssh/id_ecdsa
    mkdir ~/repo
    cd ~/repo
    git clone https://github.com/sainnhe/dotfiles.git
    git clone https://github.com/sainnhe/scripts.git
    git clone https://github.com/sainnhe/notes.git
    cd dotfiles
    git remote set-url origin git@github.com:sainnhe/dotfiles.git
    cd ../scripts
    git remote set-url origin git@github.com:sainnhe/scripts.git
    cd ../notes
    git remote set-url origin git@github.com:sainnhe/notes.git
    cd ../
    git clone https://aur.archlinux.org/pikaur.git
    cd ~/repo/pikaur
    makepkg -si
    sudo pacman -S python-pysocks asp
    printf "${BYELLOW}>> cat ~/.ssh/id_rsa.pub${NC}"
    cat ~/.ssh/id_rsa.pub
} #}}}
setup_network() { #{{{
    sudo pacman -S proxychains
    sudo systemctl enable --now NetworkManager
    sudo cp ~/repo/dotfiles/.root/etc/proxychains.conf /etc/proxychains.conf
} #}}}
setup_sddm() { #{{{
    sudo pacman -S sddm
    pikaur -S sddm-config-editor-git sddm-sugar-candy-git
    sudo cp ~/repo/dotfiles/.root/etc/sddm.conf /etc/sddm.conf
    sudo cp ~/repo/dotfiles/.root/usr/share/sddm/themes/sugar-candy/theme.conf /usr/share/sddm/themes/sugar-candy/theme.conf
} #}}}
setup_surface() { #{{{
    mkdir -p ~/playground
    cd ~/playground || exit
    # DKMS modules
    sudo pacman -S dkms acpi acpi_call-dkms
    # Install the kernel and firmwares
    sudo pacman -S linux-surface-headers linux-surface surface-ipts-firmware
    # Post-Installation
    pikaur -S update-grub aic94xx-firmware wd719x-firmware libwacom-surface surface-control surface-dtx-daemon iptsd power-profiles-daemon
    sudo update-grub
    sudo systemctl enable --now surface-dtx-daemon.service
    sudo systemctl enable --now iptsd.service
    sudo pacman -Rs linux linux-headers
    sudo sync
} #}}}
setup_nvidia() { #{{{
    printf "${BYELLOW}>> Edit PKGBUILD for optimus-manager-qt${NC} [Enter to continue] "
    read -r
    pikaur -S \
        nvidia-dkms \
        nvidia-settings \
        nvidia-utils \
        opencl-nvidia \
        lib32-nvidia-utils \
        lib32-opencl-nvidia \
        virtualgl \
        lib32-virtualgl \
        libva-vdpau-driver-vp9-git \
        libvdpau \
        vdpauinfo \
        bbswitch-dkms \
        xorg-xrandr \
        optimus-manager-qt
    sudo sync
    # surface setup
    sudo mkdir -p /etc/modprobe.d
    sudo cp ~/repo/dotfiles/.root/etc/modprobe.d/surface.conf /etc/modprobe.d/
    sudo cp ~/repo/dotfiles/.root/etc/modprobe.d/nvidia.conf /etc/modprobe.d/
    sudo mkdir -p /etc/modules-load.d
    sudo cp ~/repo/dotfiles/.root/etc/modules-load.d/nvidia.conf /etc/modules-load.d/
    # X11 setup
    sudo mkdir -p /etc/X11/xorg.conf.d
    sudo cp ~/repo/dotfiles/.root/etc/X11/xorg.conf.d/20-intel.conf /etc/X11/xorg.conf.d/
    sudo cp ~/repo/dotfiles/.root/etc/X11/xorg.conf.d/20-nvidia.conf /etc/X11/xorg.conf.d/
    
    printf "\n\n${BBLUE}>> In ${BGREEN}/etc/X11/xorg.conf.d/20-nvidia.conf${NC}\n"
    printf "${BBLUE}>> Get PCI address: ${BGREEN}https://wiki.archlinux.org/index.php/NVIDIA_Optimus_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)${NC}\n"
    printf "${BBLUE}>> Adjust ${BGREEN}/usr/share/sddm/scripts/Xsetup${NC}\n"
} #}}}
setup_zsh() { #{{{
    sudo pacman -S lua zsh
    chsh -s /usr/bin/zsh
    ln -s /home/sainnhe/repo/dotfiles/.zshrc ~/.zshrc
    ln -s /home/sainnhe/repo/dotfiles/.zsh-snippets ~/.zsh-snippets
    cp /home/sainnhe/repo/dotfiles/.zsh-theme-everforest-dark ~/.zsh-theme
    printf "${BBLUE}>> Execute ${BYELLOW}'zsh'${BBLUE} to install zsh plugins${NC}\n"
} #}}}
setup_tmux() { #{{{
    sudo pacman -S xsel copyq tmux python-requests
    git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
    mkdir -p ~/.tmux
    cp /home/sainnhe/repo/dotfiles/.tmux.conf ~/.tmux.conf
    ln -s /home/sainnhe/repo/dotfiles/.tmux/tmuxline ~/.tmux/tmuxline
    printf "${BBLUE}>> Press ${BYELLOW}'prefix+I'${BBLUE} to install plugins.${NC}\n"
    echo "'prefix I' to install plugins"
} #}}}
setup_vim() { #{{{
    pikaur -S neovim-meta
    mkdir -p ~/.config
    mkdir -p ~/.local/share/nvim
    ln -sf /home/sainnhe/repo/dotfiles/.config/nvim ~/.config/nvim
    ln -sf /home/sainnhe/repo/dotfiles/.local/share/nvim/snippets ~/.local/share/nvim/snippets
} #}}}
setup_rust() { #{{{
    sudo pacman -S rustup
    proxychains -q rustup install nightly
    rustup default nightly
    proxychains -q rustup component add \
        rust-analyzer-preview
} #}}}
setup_npm() { #{{{
    cd ~
    npm ci
} #}}}
setup_firefox() { #{{{
    cd ~/.mozilla/firefox/*.dev-edition-default || exit
    git clone https://github.com/sainnhe/minimal-functional-fox.git chrome
    cd chrome || exit
    git checkout everforest-dark
    printf "${BBLUE}>> In ${BGREEN}'about:config'${NC}\n"
    printf "${BBLUE}>> Set ${BGREEN}'toolkit.legacyUserProfileCustomizations.stylesheets'${BBLUE} to ${BGREEN}'true'${NC}\n"
} #}}}
setup_weechat() { #{{{
    proxychains -q curl -L --create-dirs -o ~/.weechat/python/autoload/autojoin.py http://www.weechat.org/files/scripts/autojoin.py
} #}}}
setup_wm() { #{{{
    pikaur -S window-manager-meta dwm-meta
} #}}}
setup_plasma() { #{{{
    pikaur -S kde-meta
    sudo gpasswd -a "$USER" input
    libinput-gestures-setup autostart
    ln -sf /home/sainnhe/repo/dotfiles/.config/kwinrulesrc ~/.config/kwinrulesrc
    printf "\n${BBLUE}>> Blur:\n${BGREEN}System Settings -> Kwin Scripts -> Force Blur\n${BBLUE}Shortcuts:\n${BGREEN}/home/sainnhe/repo/scripts/func/plasma-blur.sh 'rofi -show drun' 'Rofi'${NC}\n"
} #}}}
setup_fonts() { #{{{
    pikaur -S fonts-meta
} #}}}
setup_apps() { #{{{
    pikaur -S apps-common-meta apps-extra-meta
} #}}}

if [ "$1" = 'dotfiles' ]; then
    setup_dotfiles
elif [ "$1" = 'arch_repos' ]; then
    setup_arch_repos
elif [ "$1" = 'repos' ]; then
    setup_repos
elif [ "$1" = 'network' ]; then
    setup_network
elif [ "$1" = 'sddm' ]; then
    setup_sddm
elif [ "$1" = 'surface' ]; then
    setup_surface
elif [ "$1" = 'nvidia' ]; then
    setup_nvidia
elif [ "$1" = 'zsh' ]; then
    setup_zsh
elif [ "$1" = 'tmux' ]; then
    setup_tmux
elif [ "$1" = 'vim' ]; then
    setup_vim
elif [ "$1" = 'rust' ]; then
    setup_rust
elif [ "$1" = 'npm' ]; then
    setup_npm
elif [ "$1" = 'firefox' ]; then
    setup_firefox
elif [ "$1" = 'weechat' ]; then
    setup_weechat
elif [ "$1" = 'wm' ]; then
    setup_wm
elif [ "$1" = 'plasma' ]; then
    setup_plasma
elif [ "$1" = 'themes' ]; then
    setup_themes
elif [ "$1" = 'fonts' ]; then
    setup_fonts
elif [ "$1" = 'apps' ]; then
    setup_apps
fi
# vim: set fdm=marker fmr={{{,}}}:
